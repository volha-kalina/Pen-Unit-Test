package org.lab;

import org.testng.annotations.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.testng.Assert.*;

public class PenTest {
    ByteArrayOutputStream outputStreamCaptor;
    Pen pen;

    @BeforeMethod
    public void setPen() {
        // for doSthElse check
        outputStreamCaptor = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStreamCaptor));
    }

    @DataProvider
    public Object[][] negativeNumbers() {
        return new Object[][]{
                {-1},
                {-2},
                {-1000000000},
                {Integer.MIN_VALUE + 1},
                {Integer.MIN_VALUE}
        };
    }

    @DataProvider
    public Object[][] positiveNumbers() {
        return new Object[][]{
                {1},
                {2},
                {1000000000},
                {Integer.MAX_VALUE - 1},
                {Integer.MAX_VALUE}
        };
    }

    @DataProvider
    public Object[][] wordSizeEqualInkContainer() {
        return new Object[][]{
                {1, 1, "w"},
                {2, 1, "wo"},
                {1000, 250, "word"}
        };
    }

    @DataProvider
    public Object[][] wordSizeLessInkContainer() {
        return new Object[][]{
                {2, 1, "w"},
                {5, 2, "wo"},
                {1250, 250, "word"},
                {Integer.MAX_VALUE, 10000, "word word W #$% "}
        };
    }

    @DataProvider
    public Object[][] wordSizeMoreInkContainer() {
        return new Object[][]{
                {1, 1, "wo", "w"},
                {2, 1, "word w", "wo"}
        };
    }

    @DataProvider
    public Object[][] colors() {
        return new Object[][]{
                {"RED"},
                {"Purple"},
                {"yeLlow"},
                {"tutti-frutti"},
                {""}
        };
    }

    //positive checks
    @Test(dataProvider = "negativeNumbers")
    public void testEmptyStringReturnedIfInkLessZero(int inkContainerValueNegative) {
        pen = new Pen(inkContainerValueNegative);
        String actualResult = pen.write("word");
        assertEquals(actualResult, "");
    }

    @Test
    public void testEmptyStringReturnedIfInkZero() {
        pen = new Pen(0);
        String actualResult = pen.write("word");
        assertEquals(actualResult, "");
    }

    @Test(dataProvider = "wordSizeEqualInkContainer")
    public void testWordReturnedIfWordSizeEqualInkContainer(int inkContainerValue, double sizeLetter,
                                                            String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actualResult = pen.write(word);
        assertEquals(actualResult, word);
    }

    @Test(dataProvider = "wordSizeLessInkContainer")
    public void testWordReturnedIfWordSizeLessInkContainer(int inkContainerValue, double sizeLetter,
                                                           String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actualResultWord = pen.write(word);
        assertEquals(actualResultWord, word);
    }

    @Test(dataProvider = "wordSizeMoreInkContainer")
    public void testPartOfWordReturnedIfWordSizeMoreInkContainer(int inkContainerValue, double sizeLetter,
                                                                 String word, String expectedWord) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actualResultWord = pen.write(word);
        assertEquals(actualResultWord, expectedWord);
    }

    @Test(dataProvider = "negativeNumbers")
    public void testIsWorkMethodSeparatelyForFalse(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Boolean actualResultWork = pen.isWork();
        assertFalse(actualResultWork);
    }

    @Test(dataProvider = "positiveNumbers")
    public void testIsWorkMethodSeparatelyForTrue(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Boolean actualResultWork = pen.isWork();
        assertTrue(actualResultWork);
    }

    @Test(dataProvider = "colors")
    public void testDoSthElseMethod(String color) {
        pen = new Pen(0, 0, color);
        pen.doSomethingElse();
        assertEquals(outputStreamCaptor.toString().trim(), color);
    }

    @Test(dataProvider = "colors")
    public void testGetColorMethod(String color) {
        pen = new Pen (3,3, color);
        String actualResult = pen.getColor();
        assertEquals(actualResult, color);
    }

    //negative checks
    @Test
    public void testSizeLetterParamZero() {
        pen = new Pen(1, 0);
        String actualResult = pen.write("word");
        assertEquals(actualResult, "");
    }

    @Test(dataProvider = "positiveNumbers")
    public void testWordParamEmptyString(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        String actualResult = pen.write("");
        assertEquals(actualResult, "");
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testWordParamNull() {
        pen = new Pen(1);
        pen.write(null);
    }

    @AfterMethod
    public void deletePen() {
        pen = null;
    }
}